%---------------------------
%PASSIVE TO ACTIVE RULE
%---------------------------

rule pass {
	pattern {
	V [pos="v"];
	n1: V-[ARG2:NEQ]-> N1;
	n2: V-[ARG1:NEQ]->N2;
	N1<<V;
	N2>>V}
	
	without { Z-[ARG2:H]->V}
	commands {
	N1.sujet=yes; N1.ob=yes;
	N2.objet=yes; N2.sub=yes;
	V.verb=yes; V.vb=yes;
	del_edge n1;
	del_edge n2;
}}

package propagate_sujet { 
	rule down {
		pattern { N1[sujet]; Z1[!sujet]; N1 -> Z1 }
		commands { Z1.sujet = yes }}
	rule up {
		pattern { N1[sujet]; Z2[!sujet]; Z2 -> N1 }
		commands { Z2.sujet = yes }} }


package propagate_objet { 
rule down {
	pattern { N2[objet]; Z1[!objet]; N2 -> Z1 }
	commands { Z1.objet = yes }}
rule up {
	pattern { N2[objet]; Z2[!objet]; Z2 -> N2 }
	commands { Z2.objet = yes } }}
	
	
package propagate_verb { 
rule down {
	pattern { V[verb]; Z1[!verb]; V -> Z1 }
	commands { Z1.verb = yes }}
rule up {
	pattern { V[verb]; Z2[!verb]; Z2 -> V }
	commands { Z2.verb = yes } }}

rule right_limit{
	pattern {LR_selected[objet=yes];LR[!objet];LR > LR_selected}
	without {X[objet=yes];LR_selected < X;}
	commands {LR_selected.last=yes; del_feat LR_selected.objet }}

rule permutation_verb {
	pattern {LR[last]; V[verb];}
	commands {unorder V; insert V:>LR; del_feat V.verb; }}
   
rule permutation_sujet {
	pattern {N[sujet]; V[vb];}
	commands {unorder N; insert N:>V; del_feat N.sujet; }}   
    
rule add_edges {
	pattern {V[vb]; N[ob]; M[sub];}
	commands {add_edge V-[ARG1:NEQ]->M ; add_edge V-[ARG2:NEQ]->N ;  
   }} 
rule del_edges {
	pattern {V[vb]; N[ob]; M[sub]; Z[last]; }
	commands { del_feat V.vb; del_feat N.ob; del_feat M.sub; del_feat Z.last; }}
rule del_obj {
	pattern {Z[objet]}
    commands {del_feat Z.objet}}
   
strat main 
{Seq (pass, Onf(propagate_sujet),Onf(propagate_objet),Onf(propagate_verb),right_limit, 
Onf(permutation_verb), Onf(permutation_sujet), add_edges, Onf (del_edges), Onf (del_obj)
)}