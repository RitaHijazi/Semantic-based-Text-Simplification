% --------------------------------------------------------- 
% RULE APPOS BEGINNING
% ---------------------------------------------------------

rule appos_beginning {
	pattern {
		R [gpred="appos"]; 
		m: R -[ARG1:NEQ]-> N; 
		p: R -[ARG2:NEQ]-> M;
		k: R-[MOD:EQ]-> O; O [pos="v"];	} 
	
	without {Z []; Z << R;}	
	commands { N.select=yes; del_edge m; N.subjectlink=yes  } }

package propagate {
	rule down {
	pattern { M[select]; Z1[!select]; M -> Z1 }
	commands { Z1.select = yes }}

	rule up {
	pattern { M[select]; Z2[!select]; Z2 -> M } 
	commands { Z2.select = yes }} }

rule right_limit {
	pattern {LR_selected[select=yes];LR[!select];LR > LR_selected;}
	without {X[select=yes]; LR_selected < X;} 
	commands {LR.last=yes;}}
	
rule copy_node{ 
	pattern {S[select=yes];LR[last=yes];}
	without {X[select=yes];S > X;}
	commands{del_feat S.select;add_node S_copy:<LR;append_feats S ==> S_copy;del_feat S.subjectlink;add_edge S -[copy:yes]-> S_copy}}

rule copy_edge{
	pattern {A1 -[copy:yes]-> A2;B1 -[copy:yes]-> B2;e: A1 -> B1}
	without {f: A2 -> B2; e.label = f.label}
	commands{add_edge f: A2 -> B2; f.label = e.label;}}

rule del_copy_edge{
	pattern { c: A1 -[copy:yes]-> A2 }
	commands { del_edge c }}

rule add_verb{
	pattern { S [subjectlink=yes];R [gpred=appos];m: R-[ARG2:NEQ]-> M}
	without {S2[subjectlink=yes];S > S2}
	commands{add_node V :> S;V.lemma=be;V.pos="v";V.sense=id;V.SF=prop;V.TENSE=pres;V.MOOD=indicative;V.cvarsort=e;add_edge V -[ARG1:NEQ]-> S; add_edge V -[ARG2:NEQ]-> M;}}

rule del_appos{
	pattern { R [gpred=appos];} commands{del_node R;}}	
	
strat main 
{Seq (select_sujet,Onf(propagate),right_limit,Onf(copy_node),Onf(copy_edge),Onf(del_copy_edge),add_verb,del_appos,
)}


% --------------------------------------------------------- 
% RULE APPOS MID 
% ---------------------------------------------------------


rule appos_mid {
	pattern {
		R [gpred="appos"]; 
		m: R -[ARG1:NEQ]-> N; 
		p: R -[ARG2:NEQ]-> M;
		k: R-[MOD:EQ]-> O;
		n: O-[ARG1:NEQ]-> N;
		O [pos="v"];
		Z []; Z << R;}	
	commands { N.select=yes; del_edge m; N.subjectlink=yes; del_edge z  } }

package propagate {
	rule down {
	pattern { M[select]; Z1[!select]; M -> Z1 }
	commands { Z1.select = yes }}

	rule up {
	pattern { M[select]; Z2[!select]; Z2 -> M } 
	commands { Z2.select = yes }} }

rule right_limit {
	pattern {LR_selected[select=yes];LR[!select];LR > LR_selected;}
	without {X[select=yes]; LR_selected < X;} 
	commands {LR.last=yes;}}
	
rule copy_node{ 
	pattern {S[select=yes];LR[last=yes];}
	without {X[select=yes];S > X;}
	commands{del_feat S.select;add_node S_copy:<LR;append_feats S ==> S_copy;del_feat S.subjectlink;add_edge S -[copy:yes]-> S_copy}}

rule copy_edge{
	pattern {A1 -[copy:yes]-> A2;B1 -[copy:yes]-> B2;e: A1 -> B1}
	without {f: A2 -> B2; e.label = f.label}
	commands{add_edge f: A2 -> B2; f.label = e.label;}}

rule del_copy_edge{
	pattern { c: A1 -[copy:yes]-> A2 }
	commands { del_edge c }}

rule add_verb{
	pattern { S [subjectlink=yes];R [gpred=appos];m: R-[ARG2:NEQ]-> M}
	without {S2[subjectlink=yes];S > S2}
	commands{add_node V :> S;V.lemma=be;V.pos="v";V.sense=id;V.SF=prop;V.TENSE=pres;V.MOOD=indicative;V.cvarsort=e;add_edge V -[ARG1:NEQ]-> S; add_edge V -[ARG2:NEQ]-> M;}}

rule del_appos{
	pattern { R [gpred=appos];} commands{del_node R;}}	
	
strat main 
{Seq (select_sujet,Onf(propagate),right_limit,Onf(copy_node),Onf(copy_edge),Onf(del_copy_edge),add_verb,del_appos,
)}


% --------------------------------------------------------- 
% RULE APPOS END 
% ---------------------------------------------------------

rule appos_end {
	pattern {
		R [gpred="appos"]; 
		m: R -[ARG1:NEQ]-> N; 
		p: R -[ARG2:NEQ]-> M;
		k: R-[MOD:EQ]-> O;
		n: O-[ARG1:NEQ]-> N;
		q: D-[RSTR:H]->N; 
		O [pos="v"];}	
	commands { N.select=yes; del_edge m; N.subjectlink=yes; del_edge z  } }

package propagate {
	rule down {
	pattern { M[select]; Z1[!select]; M -> Z1 }
	commands { Z1.select = yes }}

	rule up {
	pattern { M[select]; Z2[!select]; Z2 -> M } 
	commands { Z2.select = yes }} }

rule right_limit {
	pattern {LR_selected[select=yes];LR[!select];LR > LR_selected;}
	without {X[select=yes]; LR_selected < X;} 
	commands {LR.last=yes;}}
	
rule copy_node{ 
	pattern {S[select=yes];LR[last=yes];}
	without {X[select=yes];S > X;}
	commands{del_feat S.select;add_node S_copy:<LR;append_feats S ==> S_copy;del_feat S.subjectlink;add_edge S -[copy:yes]-> S_copy}}

rule copy_edge{
	pattern {A1 -[copy:yes]-> A2;B1 -[copy:yes]-> B2;e: A1 -> B1}
	without {f: A2 -> B2; e.label = f.label}
	commands{add_edge f: A2 -> B2; f.label = e.label;}}

rule del_copy_edge{
	pattern { c: A1 -[copy:yes]-> A2 }
	commands { del_edge c }}

rule add_verb{
	pattern { S [subjectlink=yes];R [gpred=appos];m: R-[ARG2:NEQ]-> M}
	without {S2[subjectlink=yes];S > S2}
	commands{add_node V :> S;V.lemma=be;V.pos="v";V.sense=id;V.SF=prop;V.TENSE=pres;V.MOOD=indicative;V.cvarsort=e;add_edge V -[ARG1:NEQ]-> S; add_edge V -[ARG2:NEQ]-> M;}}

rule del_appos{
	pattern { R [gpred=appos];} commands{del_node R;}}	
	
strat main 
{Seq (select_sujet,Onf(propagate),right_limit,Onf(copy_node),Onf(copy_edge),Onf(del_copy_edge),add_verb,del_appos,
)}
